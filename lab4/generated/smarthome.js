//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `smarthome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let SmartHome = _ModuleRegistry.module("SmartHome");

    SmartHome.DeviceTurnedOffError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::SmartHome::DeviceTurnedOffError";
        }

        _mostDerivedType()
        {
            return SmartHome.DeviceTurnedOffError;
        }
    };

    SmartHome.InvalidColorError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::SmartHome::InvalidColorError";
        }

        _mostDerivedType()
        {
            return SmartHome.InvalidColorError;
        }
    };

    SmartHome.InvalidDate = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::SmartHome::InvalidDate";
        }

        _mostDerivedType()
        {
            return SmartHome.InvalidDate;
        }
    };

    SmartHome.Color = class
    {
        constructor(red = 0, green = 0, blue = 0)
        {
            this.red = red;
            this.green = green;
            this.blue = blue;
        }

        _write(ostr)
        {
            ostr.writeInt(this.red);
            ostr.writeInt(this.green);
            ostr.writeInt(this.blue);
        }

        _read(istr)
        {
            this.red = istr.readInt();
            this.green = istr.readInt();
            this.blue = istr.readInt();
        }

        static get minWireSize()
        {
            return  12;
        }
    };

    Slice.defineStruct(SmartHome.Color, true, false);

    SmartHome.Date = class
    {
        constructor(year = 0, month = 0, day = 0, hour = 0, minute = 0)
        {
            this.year = year;
            this.month = month;
            this.day = day;
            this.hour = hour;
            this.minute = minute;
        }

        _write(ostr)
        {
            ostr.writeInt(this.year);
            ostr.writeInt(this.month);
            ostr.writeInt(this.day);
            ostr.writeInt(this.hour);
            ostr.writeInt(this.minute);
        }

        _read(istr)
        {
            this.year = istr.readInt();
            this.month = istr.readInt();
            this.day = istr.readInt();
            this.hour = istr.readInt();
            this.minute = istr.readInt();
        }

        static get minWireSize()
        {
            return  20;
        }
    };

    Slice.defineStruct(SmartHome.Date, true, false);

    const iceC_SmartHome_Device_ids = [
        "::Ice::Object",
        "::SmartHome::Device"
    ];

    SmartHome.Device = class extends Ice.Object
    {
    };

    SmartHome.DevicePrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(SmartHome.Device, SmartHome.DevicePrx, iceC_SmartHome_Device_ids, 1,
    {
        "getDeviceName": [, 2, 2, , [7], , , , , ],
        "turnOn": [, 2, 2, , [1], , , , , ],
        "turnOff": [, 2, 2, , [1], , , , , ],
        "isTurnedOn": [, 2, 2, , [1], , , , , ]
    });

    SmartHome.InvalidBrightnessError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::SmartHome::InvalidBrightnessError";
        }

        _mostDerivedType()
        {
            return SmartHome.InvalidBrightnessError;
        }
    };

    const iceC_SmartHome_SimpleBulb_ids = [
        "::Ice::Object",
        "::SmartHome::Device",
        "::SmartHome::SimpleBulb"
    ];

    SmartHome.SimpleBulb = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                SmartHome.Device
            ];
        }
    };

    SmartHome.SimpleBulbPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                SmartHome.DevicePrx];
        }
    };

    Slice.defineOperations(SmartHome.SimpleBulb, SmartHome.SimpleBulbPrx, iceC_SmartHome_SimpleBulb_ids, 2);

    const iceC_SmartHome_DimmableBulb_ids = [
        "::Ice::Object",
        "::SmartHome::Device",
        "::SmartHome::DimmableBulb",
        "::SmartHome::SimpleBulb"
    ];

    SmartHome.DimmableBulb = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                SmartHome.SimpleBulb
            ];
        }
    };

    SmartHome.DimmableBulbPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                SmartHome.SimpleBulbPrx];
        }
    };

    Slice.defineOperations(SmartHome.DimmableBulb, SmartHome.DimmableBulbPrx, iceC_SmartHome_DimmableBulb_ids, 2,
    {
        "setBrightness": [, 2, 2, , , [[3]], ,
        [
            SmartHome.InvalidBrightnessError
        ], , ],
        "getBrightness": [, 2, 2, , [3], , , , , ]
    });

    const iceC_SmartHome_ColorBulb_ids = [
        "::Ice::Object",
        "::SmartHome::ColorBulb",
        "::SmartHome::Device",
        "::SmartHome::DimmableBulb",
        "::SmartHome::SimpleBulb"
    ];

    SmartHome.ColorBulb = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                SmartHome.DimmableBulb
            ];
        }
    };

    SmartHome.ColorBulbPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                SmartHome.DimmableBulbPrx];
        }
    };

    Slice.defineOperations(SmartHome.ColorBulb, SmartHome.ColorBulbPrx, iceC_SmartHome_ColorBulb_ids, 1,
    {
        "setColor": [, 2, 2, , , [[SmartHome.Color]], ,
        [
            SmartHome.InvalidColorError
        ], , ],
        "getColor": [, 2, 2, , [SmartHome.Color], , , , , ]
    });

    SmartHome.RoomNotFoundError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::SmartHome::RoomNotFoundError";
        }

        _mostDerivedType()
        {
            return SmartHome.RoomNotFoundError;
        }
    };

    SmartHome.ScheduleNotFoundError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::SmartHome::ScheduleNotFoundError";
        }

        _mostDerivedType()
        {
            return SmartHome.ScheduleNotFoundError;
        }
    };

    SmartHome.OngoingCleanngError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::SmartHome::OngoingCleanngError";
        }

        _mostDerivedType()
        {
            return SmartHome.OngoingCleanngError;
        }
    };

    SmartHome.CleaningScheduleConflictError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::SmartHome::CleaningScheduleConflictError";
        }

        _mostDerivedType()
        {
            return SmartHome.CleaningScheduleConflictError;
        }
    };

    SmartHome.Room = class
    {
        constructor(id = 0, name = "", area = 0.0)
        {
            this.id = id;
            this.name = name;
            this.area = area;
        }

        _write(ostr)
        {
            ostr.writeInt(this.id);
            ostr.writeString(this.name);
            ostr.writeDouble(this.area);
        }

        _read(istr)
        {
            this.id = istr.readInt();
            this.name = istr.readString();
            this.area = istr.readDouble();
        }

        static get minWireSize()
        {
            return  13;
        }
    };

    Slice.defineStruct(SmartHome.Room, false, true);

    SmartHome.CleaningSchedule = class
    {
        constructor(id = 0, room = new SmartHome.Room(), date = new SmartHome.Date())
        {
            this.id = id;
            this.room = room;
            this.date = date;
        }

        _write(ostr)
        {
            ostr.writeInt(this.id);
            SmartHome.Room.write(ostr, this.room);
            SmartHome.Date.write(ostr, this.date);
        }

        _read(istr)
        {
            this.id = istr.readInt();
            this.room = SmartHome.Room.read(istr, this.room);
            this.date = SmartHome.Date.read(istr, this.date);
        }

        static get minWireSize()
        {
            return  37;
        }
    };

    Slice.defineStruct(SmartHome.CleaningSchedule, false, true);

    Slice.defineSequence(SmartHome, "RoomListHelper", "SmartHome.Room", false);

    Slice.defineSequence(SmartHome, "CleaningScheduleListHelper", "SmartHome.CleaningSchedule", false);

    const iceC_SmartHome_SimpleCleaningRobot_ids = [
        "::Ice::Object",
        "::SmartHome::Device",
        "::SmartHome::SimpleCleaningRobot"
    ];

    SmartHome.SimpleCleaningRobot = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                SmartHome.Device
            ];
        }
    };

    SmartHome.SimpleCleaningRobotPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                SmartHome.DevicePrx];
        }
    };

    Slice.defineOperations(SmartHome.SimpleCleaningRobot, SmartHome.SimpleCleaningRobotPrx, iceC_SmartHome_SimpleCleaningRobot_ids, 2,
    {
        "startCleaningAllRooms": [, , , , , , ,
        [
            SmartHome.CleaningScheduleConflictError,
            SmartHome.DeviceTurnedOffError,
            SmartHome.OngoingCleanngError
        ], , ],
        "stopCleaning": [, 2, 2, , , , , , , ],
        "isCleaning": [, 2, 2, , [1], , , , , ]
    });

    const iceC_SmartHome_SmartCleaningRobot_ids = [
        "::Ice::Object",
        "::SmartHome::Device",
        "::SmartHome::SimpleCleaningRobot",
        "::SmartHome::SmartCleaningRobot"
    ];

    SmartHome.SmartCleaningRobot = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                SmartHome.SimpleCleaningRobot
            ];
        }
    };

    SmartHome.SmartCleaningRobotPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                SmartHome.SimpleCleaningRobotPrx];
        }
    };

    Slice.defineOperations(SmartHome.SmartCleaningRobot, SmartHome.SmartCleaningRobotPrx, iceC_SmartHome_SmartCleaningRobot_ids, 3,
    {
        "startCleaningRoom": [, , , , , [[3]], ,
        [
            SmartHome.CleaningScheduleConflictError,
            SmartHome.DeviceTurnedOffError,
            SmartHome.OngoingCleanngError,
            SmartHome.RoomNotFoundError
        ], , ],
        "addCleaningSchedule": [, , , , [SmartHome.CleaningSchedule], [[3], [SmartHome.Date]], ,
        [
            SmartHome.CleaningScheduleConflictError,
            SmartHome.InvalidDate,
            SmartHome.RoomNotFoundError
        ], , ],
        "removeCleaningSchedule": [, , , , [SmartHome.CleaningSchedule], [[3]], ,
        [
            SmartHome.ScheduleNotFoundError
        ], , ],
        "getCleaningSchedules": [, 2, 2, , ["SmartHome.CleaningScheduleListHelper"], , , , , ],
        "getRooms": [, 2, 2, , ["SmartHome.RoomListHelper"], , , , , ],
        "setRoomName": [, 2, 2, , , [[3], [7]], ,
        [
            SmartHome.RoomNotFoundError
        ], , ]
    });
    exports.SmartHome = SmartHome;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
