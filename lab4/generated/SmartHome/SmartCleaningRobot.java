//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `smarthome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SmartHome;

public interface SmartCleaningRobot extends SimpleCleaningRobot
{
    void startCleaningRoom(int roomId, com.zeroc.Ice.Current current)
        throws CleaningScheduleConflictError,
               DeviceTurnedOffError,
               OngoingCleanngError,
               RoomNotFoundError;

    CleaningSchedule addCleaningSchedule(int roomId, Date date, com.zeroc.Ice.Current current)
        throws CleaningScheduleConflictError,
               InvalidDate,
               RoomNotFoundError;

    CleaningSchedule removeCleaningSchedule(int scheduleId, com.zeroc.Ice.Current current)
        throws ScheduleNotFoundError;

    CleaningSchedule[] getCleaningSchedules(com.zeroc.Ice.Current current);

    Room[] getRooms(com.zeroc.Ice.Current current);

    void setRoomName(int roomId, String name, com.zeroc.Ice.Current current)
        throws RoomNotFoundError;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::SmartHome::Device",
        "::SmartHome::SimpleCleaningRobot",
        "::SmartHome::SmartCleaningRobot"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::SmartHome::SmartCleaningRobot";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_startCleaningRoom(SmartCleaningRobot obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_roomId;
        iceP_roomId = istr.readInt();
        inS.endReadParams();
        obj.startCleaningRoom(iceP_roomId, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addCleaningSchedule(SmartCleaningRobot obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_roomId;
        Date iceP_date;
        iceP_roomId = istr.readInt();
        iceP_date = Date.ice_read(istr);
        inS.endReadParams();
        CleaningSchedule ret = obj.addCleaningSchedule(iceP_roomId, iceP_date, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CleaningSchedule.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_removeCleaningSchedule(SmartCleaningRobot obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_scheduleId;
        iceP_scheduleId = istr.readInt();
        inS.endReadParams();
        CleaningSchedule ret = obj.removeCleaningSchedule(iceP_scheduleId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CleaningSchedule.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCleaningSchedules(SmartCleaningRobot obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        CleaningSchedule[] ret = obj.getCleaningSchedules(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CleaningScheduleListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getRooms(SmartCleaningRobot obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        Room[] ret = obj.getRooms(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        RoomListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setRoomName(SmartCleaningRobot obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_roomId;
        String iceP_name;
        iceP_roomId = istr.readInt();
        iceP_name = istr.readString();
        inS.endReadParams();
        obj.setRoomName(iceP_roomId, iceP_name, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "addCleaningSchedule",
        "getCleaningSchedules",
        "getDeviceName",
        "getRooms",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "isCleaning",
        "isTurnedOn",
        "removeCleaningSchedule",
        "setRoomName",
        "startCleaningAllRooms",
        "startCleaningRoom",
        "stopCleaning",
        "turnOff",
        "turnOn"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addCleaningSchedule(this, in, current);
            }
            case 1:
            {
                return _iceD_getCleaningSchedules(this, in, current);
            }
            case 2:
            {
                return Device._iceD_getDeviceName(this, in, current);
            }
            case 3:
            {
                return _iceD_getRooms(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 8:
            {
                return SimpleCleaningRobot._iceD_isCleaning(this, in, current);
            }
            case 9:
            {
                return Device._iceD_isTurnedOn(this, in, current);
            }
            case 10:
            {
                return _iceD_removeCleaningSchedule(this, in, current);
            }
            case 11:
            {
                return _iceD_setRoomName(this, in, current);
            }
            case 12:
            {
                return SimpleCleaningRobot._iceD_startCleaningAllRooms(this, in, current);
            }
            case 13:
            {
                return _iceD_startCleaningRoom(this, in, current);
            }
            case 14:
            {
                return SimpleCleaningRobot._iceD_stopCleaning(this, in, current);
            }
            case 15:
            {
                return Device._iceD_turnOff(this, in, current);
            }
            case 16:
            {
                return Device._iceD_turnOn(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
